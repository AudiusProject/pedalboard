// source: protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = function () {
  if (this) {
    return this
  }
  if (typeof window !== 'undefined') {
    return window
  }
  if (typeof global !== 'undefined') {
    return global
  }
  if (typeof self !== 'undefined') {
    return self
  }
  return Function('return this')()
}.call(null)

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
goog.object.extend(proto, google_protobuf_timestamp_pb)
goog.exportSymbol('proto.protocol.GetTransactionRequest', null, global)
goog.exportSymbol('proto.protocol.ManageEntityLegacy', null, global)
goog.exportSymbol('proto.protocol.PingRequest', null, global)
goog.exportSymbol('proto.protocol.PingResponse', null, global)
goog.exportSymbol('proto.protocol.SendTransactionRequest', null, global)
goog.exportSymbol('proto.protocol.SignedTransaction', null, global)
goog.exportSymbol(
  'proto.protocol.SignedTransaction.TransactionCase',
  null,
  global
)
goog.exportSymbol('proto.protocol.SlaNodeReport', null, global)
goog.exportSymbol('proto.protocol.SlaRollup', null, global)
goog.exportSymbol('proto.protocol.TrackPlay', null, global)
goog.exportSymbol('proto.protocol.TrackPlays', null, global)
goog.exportSymbol('proto.protocol.TransactionResponse', null, global)
goog.exportSymbol('proto.protocol.ValidatorRegistration', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SignedTransaction = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    500,
    null,
    proto.protocol.SignedTransaction.oneofGroups_
  )
}
goog.inherits(proto.protocol.SignedTransaction, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.SignedTransaction.displayName =
    'proto.protocol.SignedTransaction'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SendTransactionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.SendTransactionRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.SendTransactionRequest.displayName =
    'proto.protocol.SendTransactionRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.GetTransactionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.GetTransactionRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.GetTransactionRequest.displayName =
    'proto.protocol.GetTransactionRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactionResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.TransactionResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TransactionResponse.displayName =
    'proto.protocol.TransactionResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TrackPlays = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.TrackPlays.repeatedFields_,
    null
  )
}
goog.inherits(proto.protocol.TrackPlays, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TrackPlays.displayName = 'proto.protocol.TrackPlays'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ValidatorRegistration = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.ValidatorRegistration, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.ValidatorRegistration.displayName =
    'proto.protocol.ValidatorRegistration'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TrackPlay = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.TrackPlay, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TrackPlay.displayName = 'proto.protocol.TrackPlay'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PingRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.PingRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.PingRequest.displayName = 'proto.protocol.PingRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PingResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.PingResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.PingResponse.displayName = 'proto.protocol.PingResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SlaRollup = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.protocol.SlaRollup.repeatedFields_,
    null
  )
}
goog.inherits(proto.protocol.SlaRollup, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.SlaRollup.displayName = 'proto.protocol.SlaRollup'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SlaNodeReport = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.SlaNodeReport, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.SlaNodeReport.displayName = 'proto.protocol.SlaNodeReport'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ManageEntityLegacy = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.protocol.ManageEntityLegacy, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.ManageEntityLegacy.displayName =
    'proto.protocol.ManageEntityLegacy'
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.SignedTransaction.oneofGroups_ = [[1000, 1001, 1002, 1003]]

/**
 * @enum {number}
 */
proto.protocol.SignedTransaction.TransactionCase = {
  TRANSACTION_NOT_SET: 0,
  PLAYS: 1000,
  VALIDATOR_REGISTRATION: 1001,
  SLA_ROLLUP: 1002,
  MANAGE_ENTITY: 1003
}

/**
 * @return {proto.protocol.SignedTransaction.TransactionCase}
 */
proto.protocol.SignedTransaction.prototype.getTransactionCase = function () {
  return /** @type {proto.protocol.SignedTransaction.TransactionCase} */ (
    jspb.Message.computeOneofCase(
      this,
      proto.protocol.SignedTransaction.oneofGroups_[0]
    )
  )
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.SignedTransaction.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.SignedTransaction.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.SignedTransaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.SignedTransaction.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        signature: jspb.Message.getFieldWithDefault(msg, 1, ''),
        requestId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        plays:
          (f = msg.getPlays()) &&
          proto.protocol.TrackPlays.toObject(includeInstance, f),
        validatorRegistration:
          (f = msg.getValidatorRegistration()) &&
          proto.protocol.ValidatorRegistration.toObject(includeInstance, f),
        slaRollup:
          (f = msg.getSlaRollup()) &&
          proto.protocol.SlaRollup.toObject(includeInstance, f),
        manageEntity:
          (f = msg.getManageEntity()) &&
          proto.protocol.ManageEntityLegacy.toObject(includeInstance, f)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SignedTransaction}
 */
proto.protocol.SignedTransaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.SignedTransaction()
  return proto.protocol.SignedTransaction.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SignedTransaction}
 */
proto.protocol.SignedTransaction.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setRequestId(value)
        break
      case 1000:
        var value = new proto.protocol.TrackPlays()
        reader.readMessage(
          value,
          proto.protocol.TrackPlays.deserializeBinaryFromReader
        )
        msg.setPlays(value)
        break
      case 1001:
        var value = new proto.protocol.ValidatorRegistration()
        reader.readMessage(
          value,
          proto.protocol.ValidatorRegistration.deserializeBinaryFromReader
        )
        msg.setValidatorRegistration(value)
        break
      case 1002:
        var value = new proto.protocol.SlaRollup()
        reader.readMessage(
          value,
          proto.protocol.SlaRollup.deserializeBinaryFromReader
        )
        msg.setSlaRollup(value)
        break
      case 1003:
        var value = new proto.protocol.ManageEntityLegacy()
        reader.readMessage(
          value,
          proto.protocol.ManageEntityLegacy.deserializeBinaryFromReader
        )
        msg.setManageEntity(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SignedTransaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.SignedTransaction.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SignedTransaction.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getRequestId()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getPlays()
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.protocol.TrackPlays.serializeBinaryToWriter
    )
  }
  f = message.getValidatorRegistration()
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.protocol.ValidatorRegistration.serializeBinaryToWriter
    )
  }
  f = message.getSlaRollup()
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.protocol.SlaRollup.serializeBinaryToWriter
    )
  }
  f = message.getManageEntity()
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.protocol.ManageEntityLegacy.serializeBinaryToWriter
    )
  }
}

/**
 * optional string signature = 1;
 * @return {string}
 */
proto.protocol.SignedTransaction.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.protocol.SignedTransaction.prototype.getRequestId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.setRequestId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional TrackPlays plays = 1000;
 * @return {?proto.protocol.TrackPlays}
 */
proto.protocol.SignedTransaction.prototype.getPlays = function () {
  return /** @type{?proto.protocol.TrackPlays} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TrackPlays, 1000)
  )
}

/**
 * @param {?proto.protocol.TrackPlays|undefined} value
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.setPlays = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    1000,
    proto.protocol.SignedTransaction.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.clearPlays = function () {
  return this.setPlays(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.SignedTransaction.prototype.hasPlays = function () {
  return jspb.Message.getField(this, 1000) != null
}

/**
 * optional ValidatorRegistration validator_registration = 1001;
 * @return {?proto.protocol.ValidatorRegistration}
 */
proto.protocol.SignedTransaction.prototype.getValidatorRegistration =
  function () {
    return /** @type{?proto.protocol.ValidatorRegistration} */ (
      jspb.Message.getWrapperField(
        this,
        proto.protocol.ValidatorRegistration,
        1001
      )
    )
  }

/**
 * @param {?proto.protocol.ValidatorRegistration|undefined} value
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.setValidatorRegistration = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    1001,
    proto.protocol.SignedTransaction.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.clearValidatorRegistration =
  function () {
    return this.setValidatorRegistration(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.SignedTransaction.prototype.hasValidatorRegistration =
  function () {
    return jspb.Message.getField(this, 1001) != null
  }

/**
 * optional SlaRollup sla_rollup = 1002;
 * @return {?proto.protocol.SlaRollup}
 */
proto.protocol.SignedTransaction.prototype.getSlaRollup = function () {
  return /** @type{?proto.protocol.SlaRollup} */ (
    jspb.Message.getWrapperField(this, proto.protocol.SlaRollup, 1002)
  )
}

/**
 * @param {?proto.protocol.SlaRollup|undefined} value
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.setSlaRollup = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    1002,
    proto.protocol.SignedTransaction.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.clearSlaRollup = function () {
  return this.setSlaRollup(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.SignedTransaction.prototype.hasSlaRollup = function () {
  return jspb.Message.getField(this, 1002) != null
}

/**
 * optional ManageEntityLegacy manage_entity = 1003;
 * @return {?proto.protocol.ManageEntityLegacy}
 */
proto.protocol.SignedTransaction.prototype.getManageEntity = function () {
  return /** @type{?proto.protocol.ManageEntityLegacy} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ManageEntityLegacy, 1003)
  )
}

/**
 * @param {?proto.protocol.ManageEntityLegacy|undefined} value
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.setManageEntity = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    1003,
    proto.protocol.SignedTransaction.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.SignedTransaction} returns this
 */
proto.protocol.SignedTransaction.prototype.clearManageEntity = function () {
  return this.setManageEntity(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.SignedTransaction.prototype.hasManageEntity = function () {
  return jspb.Message.getField(this, 1003) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.SendTransactionRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.SendTransactionRequest.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.SendTransactionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.SendTransactionRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        transaction:
          (f = msg.getTransaction()) &&
          proto.protocol.SignedTransaction.toObject(includeInstance, f)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SendTransactionRequest}
 */
proto.protocol.SendTransactionRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.SendTransactionRequest()
  return proto.protocol.SendTransactionRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SendTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SendTransactionRequest}
 */
proto.protocol.SendTransactionRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.protocol.SignedTransaction()
        reader.readMessage(
          value,
          proto.protocol.SignedTransaction.deserializeBinaryFromReader
        )
        msg.setTransaction(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SendTransactionRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.SendTransactionRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SendTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SendTransactionRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getTransaction()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.SignedTransaction.serializeBinaryToWriter
    )
  }
}

/**
 * optional SignedTransaction transaction = 1;
 * @return {?proto.protocol.SignedTransaction}
 */
proto.protocol.SendTransactionRequest.prototype.getTransaction = function () {
  return /** @type{?proto.protocol.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, proto.protocol.SignedTransaction, 1)
  )
}

/**
 * @param {?proto.protocol.SignedTransaction|undefined} value
 * @return {!proto.protocol.SendTransactionRequest} returns this
 */
proto.protocol.SendTransactionRequest.prototype.setTransaction = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.SendTransactionRequest} returns this
 */
proto.protocol.SendTransactionRequest.prototype.clearTransaction = function () {
  return this.setTransaction(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.SendTransactionRequest.prototype.hasTransaction = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.GetTransactionRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.GetTransactionRequest.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.GetTransactionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.GetTransactionRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        txhash: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.GetTransactionRequest}
 */
proto.protocol.GetTransactionRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.GetTransactionRequest()
  return proto.protocol.GetTransactionRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.GetTransactionRequest}
 */
proto.protocol.GetTransactionRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxhash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.GetTransactionRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.GetTransactionRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.GetTransactionRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getTxhash()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string txhash = 1;
 * @return {string}
 */
proto.protocol.GetTransactionRequest.prototype.getTxhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.GetTransactionRequest} returns this
 */
proto.protocol.GetTransactionRequest.prototype.setTxhash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.TransactionResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.TransactionResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.TransactionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.TransactionResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        txhash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        transaction:
          (f = msg.getTransaction()) &&
          proto.protocol.SignedTransaction.toObject(includeInstance, f)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactionResponse}
 */
proto.protocol.TransactionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.TransactionResponse()
  return proto.protocol.TransactionResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactionResponse}
 */
proto.protocol.TransactionResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTxhash(value)
        break
      case 2:
        var value = new proto.protocol.SignedTransaction()
        reader.readMessage(
          value,
          proto.protocol.SignedTransaction.deserializeBinaryFromReader
        )
        msg.setTransaction(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.TransactionResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactionResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getTxhash()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getTransaction()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.SignedTransaction.serializeBinaryToWriter
    )
  }
}

/**
 * optional string txhash = 1;
 * @return {string}
 */
proto.protocol.TransactionResponse.prototype.getTxhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.TransactionResponse} returns this
 */
proto.protocol.TransactionResponse.prototype.setTxhash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional SignedTransaction transaction = 2;
 * @return {?proto.protocol.SignedTransaction}
 */
proto.protocol.TransactionResponse.prototype.getTransaction = function () {
  return /** @type{?proto.protocol.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, proto.protocol.SignedTransaction, 2)
  )
}

/**
 * @param {?proto.protocol.SignedTransaction|undefined} value
 * @return {!proto.protocol.TransactionResponse} returns this
 */
proto.protocol.TransactionResponse.prototype.setTransaction = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.TransactionResponse} returns this
 */
proto.protocol.TransactionResponse.prototype.clearTransaction = function () {
  return this.setTransaction(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactionResponse.prototype.hasTransaction = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.TrackPlays.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.TrackPlays.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.TrackPlays.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.TrackPlays} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.TrackPlays.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playsList: jspb.Message.toObjectList(
          msg.getPlaysList(),
          proto.protocol.TrackPlay.toObject,
          includeInstance
        )
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TrackPlays}
 */
proto.protocol.TrackPlays.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.TrackPlays()
  return proto.protocol.TrackPlays.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TrackPlays} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TrackPlays}
 */
proto.protocol.TrackPlays.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.protocol.TrackPlay()
        reader.readMessage(
          value,
          proto.protocol.TrackPlay.deserializeBinaryFromReader
        )
        msg.addPlays(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TrackPlays.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.TrackPlays.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TrackPlays} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TrackPlays.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPlaysList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protocol.TrackPlay.serializeBinaryToWriter
    )
  }
}

/**
 * repeated TrackPlay plays = 1;
 * @return {!Array<!proto.protocol.TrackPlay>}
 */
proto.protocol.TrackPlays.prototype.getPlaysList = function () {
  return /** @type{!Array<!proto.protocol.TrackPlay>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.TrackPlay, 1)
  )
}

/**
 * @param {!Array<!proto.protocol.TrackPlay>} value
 * @return {!proto.protocol.TrackPlays} returns this
 */
proto.protocol.TrackPlays.prototype.setPlaysList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.protocol.TrackPlay=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.TrackPlay}
 */
proto.protocol.TrackPlays.prototype.addPlays = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.protocol.TrackPlay,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.TrackPlays} returns this
 */
proto.protocol.TrackPlays.prototype.clearPlaysList = function () {
  return this.setPlaysList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ValidatorRegistration.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.ValidatorRegistration.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ValidatorRegistration} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.ValidatorRegistration.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        endpoint: jspb.Message.getFieldWithDefault(msg, 1, ''),
        cometAddress: jspb.Message.getFieldWithDefault(msg, 2, ''),
        ethBlock: jspb.Message.getFieldWithDefault(msg, 3, ''),
        nodeType: jspb.Message.getFieldWithDefault(msg, 4, ''),
        spId: jspb.Message.getFieldWithDefault(msg, 5, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ValidatorRegistration}
 */
proto.protocol.ValidatorRegistration.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.ValidatorRegistration()
  return proto.protocol.ValidatorRegistration.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ValidatorRegistration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ValidatorRegistration}
 */
proto.protocol.ValidatorRegistration.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setEndpoint(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setCometAddress(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setEthBlock(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setNodeType(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setSpId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ValidatorRegistration.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.ValidatorRegistration.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ValidatorRegistration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ValidatorRegistration.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getEndpoint()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getCometAddress()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getEthBlock()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getNodeType()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getSpId()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
}

/**
 * optional string endpoint = 1;
 * @return {string}
 */
proto.protocol.ValidatorRegistration.prototype.getEndpoint = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ValidatorRegistration} returns this
 */
proto.protocol.ValidatorRegistration.prototype.setEndpoint = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string comet_address = 2;
 * @return {string}
 */
proto.protocol.ValidatorRegistration.prototype.getCometAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ValidatorRegistration} returns this
 */
proto.protocol.ValidatorRegistration.prototype.setCometAddress = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string eth_block = 3;
 * @return {string}
 */
proto.protocol.ValidatorRegistration.prototype.getEthBlock = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ValidatorRegistration} returns this
 */
proto.protocol.ValidatorRegistration.prototype.setEthBlock = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string node_type = 4;
 * @return {string}
 */
proto.protocol.ValidatorRegistration.prototype.getNodeType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ValidatorRegistration} returns this
 */
proto.protocol.ValidatorRegistration.prototype.setNodeType = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string sp_id = 5;
 * @return {string}
 */
proto.protocol.ValidatorRegistration.prototype.getSpId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ValidatorRegistration} returns this
 */
proto.protocol.ValidatorRegistration.prototype.setSpId = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.TrackPlay.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.TrackPlay.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.TrackPlay} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.TrackPlay.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        trackId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp:
          (f = msg.getTimestamp()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        signature: jspb.Message.getFieldWithDefault(msg, 4, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TrackPlay}
 */
proto.protocol.TrackPlay.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.TrackPlay()
  return proto.protocol.TrackPlay.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TrackPlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TrackPlay}
 */
proto.protocol.TrackPlay.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setUserId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTrackId(value)
        break
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp()
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        )
        msg.setTimestamp(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TrackPlay.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.TrackPlay.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TrackPlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TrackPlay.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getUserId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getTrackId()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getTimestamp()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    )
  }
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
}

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.protocol.TrackPlay.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.TrackPlay} returns this
 */
proto.protocol.TrackPlay.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string track_id = 2;
 * @return {string}
 */
proto.protocol.TrackPlay.prototype.getTrackId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.TrackPlay} returns this
 */
proto.protocol.TrackPlay.prototype.setTrackId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.protocol.TrackPlay.prototype.getTimestamp = function () {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(
      this,
      google_protobuf_timestamp_pb.Timestamp,
      3
    )
  )
}

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.protocol.TrackPlay} returns this
 */
proto.protocol.TrackPlay.prototype.setTimestamp = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.TrackPlay} returns this
 */
proto.protocol.TrackPlay.prototype.clearTimestamp = function () {
  return this.setTimestamp(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TrackPlay.prototype.hasTimestamp = function () {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional string signature = 4;
 * @return {string}
 */
proto.protocol.TrackPlay.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.TrackPlay} returns this
 */
proto.protocol.TrackPlay.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.PingRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.PingRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.PingRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.PingRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PingRequest}
 */
proto.protocol.PingRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.PingRequest()
  return proto.protocol.PingRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PingRequest}
 */
proto.protocol.PingRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PingRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.PingRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PingRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.PingResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.PingResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.PingResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.PingResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        message: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PingResponse}
 */
proto.protocol.PingResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.PingResponse()
  return proto.protocol.PingResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PingResponse}
 */
proto.protocol.PingResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PingResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.PingResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PingResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string message = 1;
 * @return {string}
 */
proto.protocol.PingResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.PingResponse} returns this
 */
proto.protocol.PingResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SlaRollup.repeatedFields_ = [4]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.SlaRollup.prototype.toObject = function (opt_includeInstance) {
    return proto.protocol.SlaRollup.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.SlaRollup} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.SlaRollup.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        timestamp:
          (f = msg.getTimestamp()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        blockStart: jspb.Message.getFieldWithDefault(msg, 2, 0),
        blockEnd: jspb.Message.getFieldWithDefault(msg, 3, 0),
        reportsList: jspb.Message.toObjectList(
          msg.getReportsList(),
          proto.protocol.SlaNodeReport.toObject,
          includeInstance
        )
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SlaRollup}
 */
proto.protocol.SlaRollup.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.SlaRollup()
  return proto.protocol.SlaRollup.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SlaRollup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SlaRollup}
 */
proto.protocol.SlaRollup.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new google_protobuf_timestamp_pb.Timestamp()
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        )
        msg.setTimestamp(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setBlockStart(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setBlockEnd(value)
        break
      case 4:
        var value = new proto.protocol.SlaNodeReport()
        reader.readMessage(
          value,
          proto.protocol.SlaNodeReport.deserializeBinaryFromReader
        )
        msg.addReports(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SlaRollup.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.SlaRollup.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SlaRollup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SlaRollup.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTimestamp()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    )
  }
  f = message.getBlockStart()
  if (f !== 0) {
    writer.writeInt64(2, f)
  }
  f = message.getBlockEnd()
  if (f !== 0) {
    writer.writeInt64(3, f)
  }
  f = message.getReportsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protocol.SlaNodeReport.serializeBinaryToWriter
    )
  }
}

/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.protocol.SlaRollup.prototype.getTimestamp = function () {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(
      this,
      google_protobuf_timestamp_pb.Timestamp,
      1
    )
  )
}

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.protocol.SlaRollup} returns this
 */
proto.protocol.SlaRollup.prototype.setTimestamp = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.SlaRollup} returns this
 */
proto.protocol.SlaRollup.prototype.clearTimestamp = function () {
  return this.setTimestamp(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.SlaRollup.prototype.hasTimestamp = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional int64 block_start = 2;
 * @return {number}
 */
proto.protocol.SlaRollup.prototype.getBlockStart = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.protocol.SlaRollup} returns this
 */
proto.protocol.SlaRollup.prototype.setBlockStart = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional int64 block_end = 3;
 * @return {number}
 */
proto.protocol.SlaRollup.prototype.getBlockEnd = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.protocol.SlaRollup} returns this
 */
proto.protocol.SlaRollup.prototype.setBlockEnd = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * repeated SlaNodeReport reports = 4;
 * @return {!Array<!proto.protocol.SlaNodeReport>}
 */
proto.protocol.SlaRollup.prototype.getReportsList = function () {
  return /** @type{!Array<!proto.protocol.SlaNodeReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.SlaNodeReport, 4)
  )
}

/**
 * @param {!Array<!proto.protocol.SlaNodeReport>} value
 * @return {!proto.protocol.SlaRollup} returns this
 */
proto.protocol.SlaRollup.prototype.setReportsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value)
}

/**
 * @param {!proto.protocol.SlaNodeReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.SlaNodeReport}
 */
proto.protocol.SlaRollup.prototype.addReports = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.protocol.SlaNodeReport,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.SlaRollup} returns this
 */
proto.protocol.SlaRollup.prototype.clearReportsList = function () {
  return this.setReportsList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.SlaNodeReport.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.SlaNodeReport.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.SlaNodeReport} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.SlaNodeReport.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        numBlocksProposed: jspb.Message.getFieldWithDefault(msg, 2, 0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SlaNodeReport}
 */
proto.protocol.SlaNodeReport.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.SlaNodeReport()
  return proto.protocol.SlaNodeReport.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SlaNodeReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SlaNodeReport}
 */
proto.protocol.SlaNodeReport.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setNumBlocksProposed(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SlaNodeReport.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.SlaNodeReport.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SlaNodeReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SlaNodeReport.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getNumBlocksProposed()
  if (f !== 0) {
    writer.writeInt32(2, f)
  }
}

/**
 * optional string address = 1;
 * @return {string}
 */
proto.protocol.SlaNodeReport.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.SlaNodeReport} returns this
 */
proto.protocol.SlaNodeReport.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional int32 num_blocks_proposed = 2;
 * @return {number}
 */
proto.protocol.SlaNodeReport.prototype.getNumBlocksProposed = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.protocol.SlaNodeReport} returns this
 */
proto.protocol.SlaNodeReport.prototype.setNumBlocksProposed = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protocol.ManageEntityLegacy.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.protocol.ManageEntityLegacy.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protocol.ManageEntityLegacy} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protocol.ManageEntityLegacy.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        entityType: jspb.Message.getFieldWithDefault(msg, 2, ''),
        entityId: jspb.Message.getFieldWithDefault(msg, 3, 0),
        action: jspb.Message.getFieldWithDefault(msg, 4, ''),
        metadata: jspb.Message.getFieldWithDefault(msg, 5, ''),
        signature: jspb.Message.getFieldWithDefault(msg, 6, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ManageEntityLegacy}
 */
proto.protocol.ManageEntityLegacy.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.protocol.ManageEntityLegacy()
  return proto.protocol.ManageEntityLegacy.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ManageEntityLegacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ManageEntityLegacy}
 */
proto.protocol.ManageEntityLegacy.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setUserId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setEntityType(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setEntityId(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setAction(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setMetadata(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ManageEntityLegacy.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.protocol.ManageEntityLegacy.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ManageEntityLegacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ManageEntityLegacy.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getUserId()
  if (f !== 0) {
    writer.writeInt64(1, f)
  }
  f = message.getEntityType()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getEntityId()
  if (f !== 0) {
    writer.writeInt64(3, f)
  }
  f = message.getAction()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getMetadata()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
}

/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.protocol.ManageEntityLegacy.prototype.getUserId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.protocol.ManageEntityLegacy} returns this
 */
proto.protocol.ManageEntityLegacy.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional string entity_type = 2;
 * @return {string}
 */
proto.protocol.ManageEntityLegacy.prototype.getEntityType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ManageEntityLegacy} returns this
 */
proto.protocol.ManageEntityLegacy.prototype.setEntityType = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional int64 entity_id = 3;
 * @return {number}
 */
proto.protocol.ManageEntityLegacy.prototype.getEntityId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.protocol.ManageEntityLegacy} returns this
 */
proto.protocol.ManageEntityLegacy.prototype.setEntityId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional string action = 4;
 * @return {string}
 */
proto.protocol.ManageEntityLegacy.prototype.getAction = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ManageEntityLegacy} returns this
 */
proto.protocol.ManageEntityLegacy.prototype.setAction = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.protocol.ManageEntityLegacy.prototype.getMetadata = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ManageEntityLegacy} returns this
 */
proto.protocol.ManageEntityLegacy.prototype.setMetadata = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string signature = 6;
 * @return {string}
 */
proto.protocol.ManageEntityLegacy.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.protocol.ManageEntityLegacy} returns this
 */
proto.protocol.ManageEntityLegacy.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

goog.object.extend(exports, proto.protocol)
