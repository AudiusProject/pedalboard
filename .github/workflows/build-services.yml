name: Build Services

on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag to apply to images'
        required: true
        type: string

jobs:
  # Generate services list for matrix
  setup:
    name: Setup services matrix
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.setup-services.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup services matrix
        id: setup-services
        uses: ./.github/actions/setup-services-matrix

  # Build AMD64 images  
  build-amd64:
    name: Build ${{ matrix.service }} (amd64)
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Build Docker Image
        uses: ./.github/actions/build-docker-image
        with:
          service_name: ${{ matrix.service }}
          tag: ${{ inputs.tag }}-amd64
          platform: linux/amd64
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}

  # Build ARM64 images
  build-arm64:
    name: Build ${{ matrix.service }} (arm64)
    runs-on: ubuntu-24.04-arm
    needs: setup
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Build Docker Image
        uses: ./.github/actions/build-docker-image
        with:
          service_name: ${{ matrix.service }}
          tag: ${{ inputs.tag }}-arm64
          platform: linux/arm64
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}

  # Create multiarch manifests
  create-multiarch:
    name: Create multiarch manifest for ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [setup, build-amd64, build-arm64]
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
    steps:
      
      - name: Docker Login
        uses: ./.github/actions/docker-login
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Create multiarch manifest
        run: |
          AMD64_TAG="audius/pedalboard:${{ matrix.service }}-${{ inputs.tag }}-amd64"
          ARM64_TAG="audius/pedalboard:${{ matrix.service }}-${{ inputs.tag }}-arm64"
          MULTIARCH_TAG="audius/pedalboard:${{ matrix.service }}-${{ inputs.tag }}"
          
          docker buildx imagetools create \
            "$AMD64_TAG" \
            "$ARM64_TAG" \
            --tag "$MULTIARCH_TAG"
          